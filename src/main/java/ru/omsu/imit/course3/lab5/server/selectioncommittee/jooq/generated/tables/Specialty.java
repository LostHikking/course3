/*
 * This file is generated by jOOQ.
 */
package ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.Indexes;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.Keys;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.Selectioncommittee;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.tables.records.SpecialtyRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.11"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Specialty extends TableImpl<SpecialtyRecord> {

    private static final long serialVersionUID = 1464963702;

    /**
     * The reference instance of <code>selectioncommittee.specialty</code>
     */
    public static final Specialty SPECIALTY = new Specialty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpecialtyRecord> getRecordType() {
        return SpecialtyRecord.class;
    }

    /**
     * The column <code>selectioncommittee.specialty.id</code>.
     */
    public final TableField<SpecialtyRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>selectioncommittee.specialty.code</code>.
     */
    public final TableField<SpecialtyRecord, Integer> CODE = createField("code", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>selectioncommittee.specialty.faculty_id</code>.
     */
    public final TableField<SpecialtyRecord, Integer> FACULTY_ID = createField("faculty_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>selectioncommittee.specialty.name</code>.
     */
    public final TableField<SpecialtyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>selectioncommittee.specialty.first_discipline_id</code>.
     */
    public final TableField<SpecialtyRecord, Integer> FIRST_DISCIPLINE_ID = createField("first_discipline_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>selectioncommittee.specialty.second_discipline_id</code>.
     */
    public final TableField<SpecialtyRecord, Integer> SECOND_DISCIPLINE_ID = createField("second_discipline_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>selectioncommittee.specialty.third_discipline_id</code>.
     */
    public final TableField<SpecialtyRecord, Integer> THIRD_DISCIPLINE_ID = createField("third_discipline_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>selectioncommittee.specialty</code> table reference
     */
    public Specialty() {
        this(DSL.name("specialty"), null);
    }

    /**
     * Create an aliased <code>selectioncommittee.specialty</code> table reference
     */
    public Specialty(String alias) {
        this(DSL.name(alias), SPECIALTY);
    }

    /**
     * Create an aliased <code>selectioncommittee.specialty</code> table reference
     */
    public Specialty(Name alias) {
        this(alias, SPECIALTY);
    }

    private Specialty(Name alias, Table<SpecialtyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Specialty(Name alias, Table<SpecialtyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Specialty(Table<O> child, ForeignKey<O, SpecialtyRecord> key) {
        super(child, key, SPECIALTY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Selectioncommittee.SELECTIONCOMMITTEE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SPECIALTY_FACULTY_ID, Indexes.SPECIALTY_FIRST_DISCIPLINE_ID, Indexes.SPECIALTY_PRIMARY, Indexes.SPECIALTY_SECOND_DISCIPLINE_ID, Indexes.SPECIALTY_THIRD_DISCIPLINE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SpecialtyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SPECIALTY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SpecialtyRecord> getPrimaryKey() {
        return Keys.KEY_SPECIALTY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SpecialtyRecord>> getKeys() {
        return Arrays.<UniqueKey<SpecialtyRecord>>asList(Keys.KEY_SPECIALTY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SpecialtyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SpecialtyRecord, ?>>asList(Keys.SPECIALTY_IBFK_1, Keys.SPECIALTY_IBFK_2, Keys.SPECIALTY_IBFK_3, Keys.SPECIALTY_IBFK_4);
    }

    public Faculties faculties() {
        return new Faculties(this, Keys.SPECIALTY_IBFK_1);
    }

    public Disciplines specialtyIbfk_2() {
        return new Disciplines(this, Keys.SPECIALTY_IBFK_2);
    }

    public Disciplines specialtyIbfk_3() {
        return new Disciplines(this, Keys.SPECIALTY_IBFK_3);
    }

    public Disciplines specialtyIbfk_4() {
        return new Disciplines(this, Keys.SPECIALTY_IBFK_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Specialty as(String alias) {
        return new Specialty(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Specialty as(Name alias) {
        return new Specialty(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Specialty rename(String name) {
        return new Specialty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Specialty rename(Name name) {
        return new Specialty(name, null);
    }
}
