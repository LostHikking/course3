/*
 * This file is generated by jOOQ.
 */
package ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.Indexes;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.Keys;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.Selectioncommittee;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.tables.records.ApplicantsRecord;

import javax.annotation.Generated;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.11"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Applicants extends TableImpl<ApplicantsRecord> {

    private static final long serialVersionUID = -208543086;

    /**
     * The reference instance of <code>selectioncommittee.applicants</code>
     */
    public static final Applicants APPLICANTS = new Applicants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicantsRecord> getRecordType() {
        return ApplicantsRecord.class;
    }

    /**
     * The column <code>selectioncommittee.applicants.id</code>.
     */
    public final TableField<ApplicantsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>selectioncommittee.applicants.first_name</code>.
     */
    public final TableField<ApplicantsRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>selectioncommittee.applicants.last_name</code>.
     */
    public final TableField<ApplicantsRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>selectioncommittee.applicants.birthdate</code>.
     */
    public final TableField<ApplicantsRecord, Date> BIRTHDATE = createField("birthdate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>selectioncommittee.applicants</code> table reference
     */
    public Applicants() {
        this(DSL.name("applicants"), null);
    }

    /**
     * Create an aliased <code>selectioncommittee.applicants</code> table reference
     */
    public Applicants(String alias) {
        this(DSL.name(alias), APPLICANTS);
    }

    /**
     * Create an aliased <code>selectioncommittee.applicants</code> table reference
     */
    public Applicants(Name alias) {
        this(alias, APPLICANTS);
    }

    private Applicants(Name alias, Table<ApplicantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Applicants(Name alias, Table<ApplicantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Applicants(Table<O> child, ForeignKey<O, ApplicantsRecord> key) {
        super(child, key, APPLICANTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Selectioncommittee.SELECTIONCOMMITTEE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APPLICANTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ApplicantsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_APPLICANTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ApplicantsRecord> getPrimaryKey() {
        return Keys.KEY_APPLICANTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ApplicantsRecord>> getKeys() {
        return Arrays.<UniqueKey<ApplicantsRecord>>asList(Keys.KEY_APPLICANTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Applicants as(String alias) {
        return new Applicants(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Applicants as(Name alias) {
        return new Applicants(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Applicants rename(String name) {
        return new Applicants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Applicants rename(Name name) {
        return new Applicants(name, null);
    }
}
