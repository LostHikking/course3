/*
 * This file is generated by jOOQ.
 */
package ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.Indexes;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.Keys;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.Selectioncommittee;
import ru.omsu.imit.course3.lab5.server.selectioncommittee.jooq.generated.tables.records.DisciplinesRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.11"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Disciplines extends TableImpl<DisciplinesRecord> {

    private static final long serialVersionUID = 1360447207;

    /**
     * The reference instance of <code>selectioncommittee.disciplines</code>
     */
    public static final Disciplines DISCIPLINES = new Disciplines();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DisciplinesRecord> getRecordType() {
        return DisciplinesRecord.class;
    }

    /**
     * The column <code>selectioncommittee.disciplines.id</code>.
     */
    public final TableField<DisciplinesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>selectioncommittee.disciplines.name</code>.
     */
    public final TableField<DisciplinesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>selectioncommittee.disciplines</code> table reference
     */
    public Disciplines() {
        this(DSL.name("disciplines"), null);
    }

    /**
     * Create an aliased <code>selectioncommittee.disciplines</code> table reference
     */
    public Disciplines(String alias) {
        this(DSL.name(alias), DISCIPLINES);
    }

    /**
     * Create an aliased <code>selectioncommittee.disciplines</code> table reference
     */
    public Disciplines(Name alias) {
        this(alias, DISCIPLINES);
    }

    private Disciplines(Name alias, Table<DisciplinesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Disciplines(Name alias, Table<DisciplinesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Disciplines(Table<O> child, ForeignKey<O, DisciplinesRecord> key) {
        super(child, key, DISCIPLINES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Selectioncommittee.SELECTIONCOMMITTEE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DISCIPLINES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DisciplinesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DISCIPLINES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DisciplinesRecord> getPrimaryKey() {
        return Keys.KEY_DISCIPLINES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DisciplinesRecord>> getKeys() {
        return Arrays.<UniqueKey<DisciplinesRecord>>asList(Keys.KEY_DISCIPLINES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Disciplines as(String alias) {
        return new Disciplines(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Disciplines as(Name alias) {
        return new Disciplines(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Disciplines rename(String name) {
        return new Disciplines(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Disciplines rename(Name name) {
        return new Disciplines(name, null);
    }
}
