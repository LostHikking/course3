/*
 * This file is generated by jOOQ.
 */
package ru.omsu.imit.course3.second.lab5.server.selectioncommittee.jooq.generated.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.omsu.imit.course3.second.lab5.server.selectioncommittee.jooq.generated.Indexes;
import ru.omsu.imit.course3.second.lab5.server.selectioncommittee.jooq.generated.Keys;
import ru.omsu.imit.course3.second.lab5.server.selectioncommittee.jooq.generated.Selectioncommittee;
import ru.omsu.imit.course3.second.lab5.server.selectioncommittee.jooq.generated.tables.records.ResultsofexamsRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.11"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Resultsofexams extends TableImpl<ResultsofexamsRecord> {

    private static final long serialVersionUID = 371494036;

    /**
     * The reference instance of <code>selectioncommittee.resultsofexams</code>
     */
    public static final Resultsofexams RESULTSOFEXAMS = new Resultsofexams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResultsofexamsRecord> getRecordType() {
        return ResultsofexamsRecord.class;
    }

    /**
     * The column <code>selectioncommittee.resultsofexams.id</code>.
     */
    public final TableField<ResultsofexamsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>selectioncommittee.resultsofexams.applicant_id</code>.
     */
    public final TableField<ResultsofexamsRecord, Integer> APPLICANT_ID = createField("applicant_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>selectioncommittee.resultsofexams.discipline_id</code>.
     */
    public final TableField<ResultsofexamsRecord, Integer> DISCIPLINE_ID = createField("discipline_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>selectioncommittee.resultsofexams.result</code>.
     */
    public final TableField<ResultsofexamsRecord, Integer> RESULT = createField("result", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>selectioncommittee.resultsofexams</code> table reference
     */
    public Resultsofexams() {
        this(DSL.name("resultsofexams"), null);
    }

    /**
     * Create an aliased <code>selectioncommittee.resultsofexams</code> table reference
     */
    public Resultsofexams(String alias) {
        this(DSL.name(alias), RESULTSOFEXAMS);
    }

    /**
     * Create an aliased <code>selectioncommittee.resultsofexams</code> table reference
     */
    public Resultsofexams(Name alias) {
        this(alias, RESULTSOFEXAMS);
    }

    private Resultsofexams(Name alias, Table<ResultsofexamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Resultsofexams(Name alias, Table<ResultsofexamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Resultsofexams(Table<O> child, ForeignKey<O, ResultsofexamsRecord> key) {
        super(child, key, RESULTSOFEXAMS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Selectioncommittee.SELECTIONCOMMITTEE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESULTSOFEXAMS_APPLICANT_ID, Indexes.RESULTSOFEXAMS_DISCIPLINE_ID, Indexes.RESULTSOFEXAMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ResultsofexamsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESULTSOFEXAMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResultsofexamsRecord> getPrimaryKey() {
        return Keys.KEY_RESULTSOFEXAMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResultsofexamsRecord>> getKeys() {
        return Arrays.<UniqueKey<ResultsofexamsRecord>>asList(Keys.KEY_RESULTSOFEXAMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ResultsofexamsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ResultsofexamsRecord, ?>>asList(Keys.RESULTSOFEXAMS_IBFK_1, Keys.RESULTSOFEXAMS_IBFK_2);
    }

    public Applicants applicants() {
        return new Applicants(this, Keys.RESULTSOFEXAMS_IBFK_1);
    }

    public Disciplines disciplines() {
        return new Disciplines(this, Keys.RESULTSOFEXAMS_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Resultsofexams as(String alias) {
        return new Resultsofexams(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Resultsofexams as(Name alias) {
        return new Resultsofexams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Resultsofexams rename(String name) {
        return new Resultsofexams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resultsofexams rename(Name name) {
        return new Resultsofexams(name, null);
    }
}
